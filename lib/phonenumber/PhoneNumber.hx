package phonenumber;

/**
 * Номер телефона.
 */
@:dce
extern class PhoneNumber
{
    /**
     * Номер телефона в E.164формате.  
     * Пример: `"+12133734253"`
     */
    public var number:E164Number;

    /**
     * Телефонный код страны.  
     * Пример: `1`
     */
    public var countryCallingCode:CountryCallingCode;

    /**
     * Национально значимый номер.  
     * Пример: `2133734253`
     */
    public var nationalNumber:NationalNumber;

    /**
     * Код страны.  
     * Может быть не определён, если номер принадлежит
     * нескольким странам или ни одной.
     * 
     * Пример: `RU`
     */
    public var country:Country;

    /**
     * Добавочный номер, если есть.  
     * Пример: `1234`
     */
    public var ext:Extension;

    /**
     * Код оператора связи, если есть.  
     * Пример: `15`
     */
    public var carrierCode:CarrierCode;

    /**
     * Проверка допустимости номера.  
     * Проверяет "возможен ли" телефонный номер.
     * Сверяет только длину телефонного номера, не
     * затрагивая цифры на соответствие регулярным
     * выражениям.
     * @return Телефон допустимый.
     */
    public function isPossible():Bool;

    /**
     * Проверка корректности.  
     * Проверяет, действителен ли номер телефона.
     * Сначала проверяется длина номера телефона,
     * а затем цифры номера телефона сравниваются
     * со всеми доступными регулярными выражениями.
     * 
     * По умолчанию библиотека использует «минимальные»
     * метаданные размером всего 75 килобайт, но
     * также не включает точные регулярные выражения
     * проверки, что приводит к менее строгим правилам
     * проверки (некоторые очень простые проверки,
     * такие как проверка длины, по-прежнему включены
     * для каждой страны). Если вы не возражаете
     * против дополнительных 65 килобайт метаданных,
     * используйте вместо них «полные» метаданные
     * (140 килобайт). Библиотека Google всегда
     * использует «полные» метаданные, поэтому
     * результаты будут отличаться `isValid()` от
     * «минимальных» метаданных, используемых по
     * умолчанию в этой библиотеке.
     * 
     * @return Номер корректный.
     */
    public function isValid():Bool;

    /**
     * Получить тип номера.  
     * Возвращает тип номера телефона (стационарный,
     * мобильный, бесплатный и т. д.) или `undefined`
     * (если номер недействителен или если в метаданных
     * нет регулярных выражений типа номера телефона
     * для этой страны).
     * 
     * По умолчанию библиотека использует «минимальные»
     * метаданные размером всего 75 килобайт, но также
     * не включает регулярные выражения для определения
     * конкретного типа номера телефона (стационарный,
     * мобильный, бесплатный и т. д.), что приводит к
     * `getType()` возврату: `undefined` для большинства
     * стран. Если вы не возражаете против дополнительных
     * 65 килобайт метаданных, используйте вместо них
     * «полные» метаданные (140 килобайт). Библиотека
     * Google всегда использует «полные» метаданные,
     * поэтому результаты будут отличаться `getType()`
     * от «минимальных» метаданных, используемых по
     * умолчанию в этой библиотеке.
     * 
     * @return Тип номера телефона.
     */
    public function getType():NumberType;

    /**
     * Не географический номер телефона.  
     * Возвращает: `true`, если номер является одним из:
     * - `+800` - Универсальный международный бесплатный номер.
     * - `+808` - Универсальный международный номер общей стоимости.
     * - `+870` - Инмарсат Глобал Лимитед.
     * - `+878` - Универсальные персональные телекоммуникации.
     * - `+881` - Глобальная мобильная спутниковая система.
     * - `+882` - Международные сети.
     * - `+883` - Международные сети.
     * - `+888` - Управление Организации Объединенных Наций по
     *            координации гуманитарной деятельности.
     * - `+979` - Международная услуга премиум-класса.
     * 
     * @return Номер не принадлежит ни одной стране.
     */
    public function isNonGeographic():Bool;

    /**
     * Сравнить два номера.  
     * Возвращает: `true`, если номера равны и `false`
     * в остальных случаях.
     * @param phoneNumber Сравниваемый номер.
     * @return Номера равны.
     */
    public function isEqual(phoneNumber:PhoneNumber):Bool;
}